What happens when you initialize a repository? Why do you need to do it?
it creates a .git folder in order to start storing meta-data about the files in the supposedly a new git repository. it doesn't however create the first commit for you.

You may also wish to run git status after you have created the file. You should see that now both files are listed as untracked files.

On branch master

Initial commit

Untracked files:
  (use "git add <file>..." to include in what will be committed)

	lesson_1_reflections.txt
	lesson_2_reflections.txt

nothing added to commit but untracked files present (use "git add" to track)

How is the staging area different from the working directory and the repository? What value do you think it offers?

staging area is more of a place to store the files that are being tracked for changes, it caches the file somewhere so when commit is executed it stores the differences in the git repo metadata to be tracked by git diff?

How can you use the staging area to make sure you have one commit per logical change?
when you commit, you commit the changes in the staging area to working directory. you can check the staging area for files that are modified, you can also check use git diff --stage to see if changes are related to one logical change or not.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches allow you to test scenarios without impacting the original branch. so you can easily differentiate between what was done for testing a certain scenario and what is required for the original program

How do the diagrams help you visualize the branch structure?

Diagrams help you understand whether certain nodes/branches are reachable or not.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

result of merging is to include latest changes from both branches into one single branch. it's a useful tool to combine the efforts done on several branches. drawing it allows you to understand what exactly are you merging and the impact of that merge on the history, unreachable branches, discarded changes..etc.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

automatic merging does the dummy work automatically and alarm you for conflicts that you need to focus on, instead of auditing the whole files. problem with it, is that it's not smart enough to conclude about the conflicts, but at least it narrows it down pretty well
